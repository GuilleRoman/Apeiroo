# TEMPLATE FILE - CI/CD Pipeline Example
# ---------------------------------------
# This is a demonstration template showing how the CI/CD pipeline would be 
# implemented in a production environment. This file is not meant to be executed
# as-is and would require configuration of actual secrets and deployment resources.

name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
    # NOTE: This is a template showing how deployment would be structured
    # In a real implementation, you would configure cloud provider credentials,
    # deployment targets, and monitoring notifications
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check TypeScript types
        run: npm run type-check # Assuming you have a script for type checking

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Run Jest tests
        run: npm test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/todo_test
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: ./backend/coverage

  build:
    name: Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run bui